replicaCount: 1

image:
  repository: thiennt/test
  pullPolicy: IfNotPresent
  tag: "0d27036f"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## The name of the secret which we will use to generate a superset_config.py file
## Note: this secret must have the key superset_config.py in it and can include other files as well
##
configFromSecret: '{{ template "actableai.fullname" . }}-config'

## The name of the secret which we will use to populate env vars in deployed pods
## This can be useful for secret keys, etc.
##
envFromSecret: '{{ template "actableai.fullname" . }}-env'
envFromSecrets: []

## Init job configuration
init:
  # Configure resources
  # Warning: fab commant consumes a lot of ram and can
  # cause the process to be killed due to OOM if it exceeds limit
  resources: {}
    # limits:
    #   cpu:
    #   memory:
    # requests:
  #   cpu:
  #   memory:
  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_init.sh"
  enabled: true
  loadExamples: false
  adminUser:
    username: admin
    firstname: ActableAI
    lastname: Admin
    email: admin@example.com
    password: "password"
  initscript: |-
    #!/bin/sh
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Loading examples..."

## ActableAI node configuration
actableaiNode:
  replicaCount: 1
  command:
    - "/bin/sh"
    - "-c"
    - "/usr/bin/docker-entrypoint.sh"
  connections:
    redis_host: '{{ .Release.Name }}-redis-headless'
    redis_port: "6379"
    system_db_host: '{{ .Release.Name }}-postgresql'
    system_db_port: "5432"
    system_db_user: postgres
    system_db_pass: actableai
    system_db_name: actableai
    example_db_host: '{{ .Release.Name }}-postgresql'
    example_db_port: "5432"
    example_db_user: postgres
    example_db_pass: actableai
    example_db_name: actableai

##
## ActableAI worker configuration
actableaiWorker:
  replicaCount: 1
  command:
    - "/bin/sh"
    - "-c"
    - "/usr/bin/docker-bootstrap.sh worker"


configMountPath: "/app/pythonpath"

extraConfigMountPath: "/app/configs"


## Extra environment variables that will be passed into pods
##
extraEnv:
  logLevel: ERROR
  SENTRY_ENABLE: false
  SECRET_KEY: YOUR_OWN_RANDOM_GENERATED_SECRET_KEY
  SENTRY_JS_DSN: ""
  SENTRY_FLASK_DSN: ""
  SENTRY_ENV: ""
  SENTRY_RELEASE: v0.2.1
  RAY_CPU_PER_TRIAL: "1"
  RAY_GPU_PER_TRIAL: "0.1"
  RAY_MAX_CONCURRENT: "4"
  N_CPU_CLASSIFICATION: "0.01"
  N_GPU_CLASSIFICATION: "0.01"
  N_CPU_CLASSIFICATION_TRAIN: "2"
  N_GPU_CLASSIFICATION_TRAIN: "0.2"
  N_CPU_REGRESSION: "0.01"
  N_GPU_REGRESSION: "0.01"
  N_CPU_REGRESSION_TRAIN: "2"
  N_GPU_REGRESSION_TRAIN: "0.2"
  AG_AUTOMM_ENABLED: "true"
  N_CPU_SENTIMENT: "1"
  N_GPU_SENTIMENT: "0.3"
  N_CPU_TIMESERIES: "0.01"
  N_GPU_TIMESERIES: "0.01"
  TIMESERIES_MAX_CONCURRENT: "4"
  N_CPU_SEGMENTATION: "1"
  N_GPU_SEGMENTATION: "0.2"
  N_CPU_IMPUTATION: "1"
  N_GPU_IMPUTATION: "0"
  N_CPU_CORRELATION: "1"
  N_GPU_CORRELATION: "0"

  N_CPU_CAUSAL_INFERENCE: "2"
  N_GPU_CAUSAL_INFERENCE: "0"

  N_CPU_BAYESIAN_REGRESSION: "1"
  N_GPU_BAYESIAN_REGRESSION: "0"
  N_CPU_INTERVENTION: "1"
  N_GPU_INTERVENTION: "0"
  N_CPU_ASSOCIATION_RULES: "1"
  N_GPU_ASSOCIATION_RULES: "0"

  SENTIMENT_DEVICE: "cuda"
  BERT_DIR: "/data/SpanABSA/bert-base-uncased"
  EXTRACT_MODEL_DIR: "/data/SpanABSA/extract.pth.tar"
  CLASSIFICATION_MODEL_DIR: "/data/SpanABSA/cls.pth.tar"

  AWS_S3_RESOURCES_PREDICTORS_BUCKET: "actable-ai-resources-predictors"
  RESOURCES_PREDICTORS_ENABLED: "true"
  AWS_S3_RESOURCES_PREDICTORS_PREFIX: "dev"
  RESOURCES_PREDICTORS_BACKUP_PROBABILITY: "0.1"
  MEMORY_OPTIMIZER_OFFSET: "0.1"
  MEMORY_OPTIMIZER_NRMSE_THRESHOLD: "0.2"
  FLASK_MONITORING_DASHBOARD_ENABLE: False

  MODEL_DEPLOYMENT_ENABLED: "true"

  AWS_S3_MODELS_PREFIX: "dev"
  AWS_S3_MODELS_BUCKET: "actable-ai-models"

  DB_FOR_CREATE_USER_WORKSPACE: "actableai"
  APPSHEET_TEMP_UPLOAD_CSV_DB: "actableai"
  APPSHEET_TEMP_UPLOAD_CSV_SCHEMA: "public"

  ACTABLEAI_URL: http://localhost:8088
  MAX_UPLOADED_PUBLIC_DATASETS_PER_DAY: 2
  ONLY_BETA_LOGIN: false
  PYROSCOPE_ENABLED: "false"
  OTEL_ENABLED: "false"
  CHECK_COMPATIBLE_ANALYTICS: "false"

  LOG_LEVEL: "INFO"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8088

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local



##
## Configuration values for the postgresql dependency.
## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
postgresql:
  ##
  ## Use the PostgreSQL chart dependency.
  ## Set to false if bringing your own PostgreSQL.
  enabled: true

  ##
  ## The name of an existing secret that contains the postgres password.
  existingSecret:

  ## Name of the key containing the secret.
  existingSecretKey: postgresql-password

  ##
  ## If you are bringing your own PostgreSQL, you should set postgresHost and
  ## also probably service.port, postgresqlUsername, postgresqlPassword, and postgresqlDatabase
  ## postgresHost:
  ##
  ## PostgreSQL port
  service:
    port: 5432
  ## PostgreSQL User to create.
  postgresqlPostgresPassword: "actableai"

  postgresqlUsername: actableai
  ##
  ## PostgreSQL Password for the new user.
  ## If not set, a random 10 characters password will be used.
  postgresqlPassword: "actableai"
  ##
  ## PostgreSQL Database to create.
  postgresqlDatabase: actableai
  ##
  ## Persistent Volume Storage configuration.
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  persistence:
    ##
    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    enabled: true
    ##
    ## Persistant class
    # storageClass: classname

    size: 10Gi
    ##
    ## Access modes:
    accessModes:
      - ReadWriteOnce
  resources:
    requests:
      cpu: 200m
      memory: 1024Mi

# -- Configuration values for the Redis dependency.
# ref: https://github.com/bitnami/charts/blob/master/bitnami/redis
# More documentation can be found here: https://artifacthub.io/packages/helm/bitnami/redis
# @default -- see `values.yaml`
redis:
  ##
  ## Use the redis chart dependency.
  ##
  ## If you are bringing your own redis, you can set the host in supersetNode.connections.redis_host
  ##
  ## Set to false if bringing your own redis.
  enabled: true
  ##
  ## Set architecture to standalone/replication
  architecture: standalone
  ##
  ## Auth configuration:
  ##
  auth:
    ## Enable password authentication
    enabled: false
    ## The name of an existing secret that contains the redis password.
    existingSecret: ""
    ## Name of the key containing the secret.
    existingSecretKey: ""
    ## Redis password
    password: superset
  ##
  ## Master configuration
  ##
  master:
    ##
    ## Image configuration
    # image:
    ##
    ## docker registry secret names (list)
    # pullSecrets: nil
    ##
    ## Configure persistance
    persistence:
      ##
      ## Use a PVC to persist data.
      enabled: false
      ##
      ## Persistant class
      # storageClass: classname
      ##
      ## Access mode:
      accessModes:
        - ReadWriteOnce

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
